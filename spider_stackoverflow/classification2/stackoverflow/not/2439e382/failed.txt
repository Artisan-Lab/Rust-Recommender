The error message is indicating that `node` has been partially moved in the match arm `Link::More(nd) => {self.head= nd.next;}`, which means that some of its fields (in this case, `nd`) have been moved out of it. After that, `node` cannot be used because it is in an inconsistent state. 

To fix this issue, you can replace `self.head = nd.next` with `self.head = *nd.next`, which will move the `Box<Node>` out of `nd` and leave `nd` in a consistent state. 

Here's the updated code:

```rust
use std::mem;

struct Node{
    elem: i32,
    next : Link,
}

enum Link {
    Empty,
    More(Box<Node>),
}

pub struct List{
    head: Link,
}

impl List{
    pub fn pop_node(&mut self) -> Link{
        let node = mem::replace(&mut self.head, Link::Empty);
        match node {
            Link::More(nd) => {self.head = *nd.next;}
            _ => ()
        };
        node
    }
}

fn main() {}
```