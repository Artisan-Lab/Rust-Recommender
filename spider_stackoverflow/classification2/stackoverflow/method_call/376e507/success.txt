The error is caused by trying to move the `String` fields out of `self` in the getter methods, which is not allowed because the `self` parameter is mutable. To fix the error, you can change the return type of the getter methods to a reference to the corresponding `String` fields. Here's the corrected code:

```rust
struct Person {
    firstName: String,
    lastName: String,
}

impl Person {
    fn get_first_name(&self) -> &String {
        &self.firstName
    }
    
    fn get_last_name(&self) -> &String {
        &self.lastName
    }

    fn set_first_name(&mut self, x: String) {
        self.firstName = x;
    }
    
    fn set_last_name(&mut self, x: String) {
        self.lastName = x;
    }

    fn default() -> Person {
        Person {firstName: "".to_string(), lastName: "".to_string()}
    }
}

fn main() {
    let mut my_person: Person = Person { ..Person::default() };

    my_person.set_first_name("John".to_string());
    my_person.set_last_name("Doe".to_string());

    println!("{}", my_person.get_first_name());
    println!("{}", my_person.get_last_name());
}
```

In the getter methods, we are returning references to the `String` fields using the `&` operator. The setter methods are also modified to accept owned `String`s instead of references to avoid unnecessary borrowing.